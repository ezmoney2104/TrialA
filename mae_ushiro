// realtimeandon

<template>
  <v-app class="bg-surface-variant overflow-hidden">
    <NavBarComponent />
    <v-container fluid class="operationStatusContainer">
      <v-row>
        <v-col class="lineOperationStatus"><OperationStatusScreen /></v-col>
        <v-col class="imageOperationStatus"></v-col>
      </v-row>
    </v-container>
  </v-app>
</template>

<script>
import NavBarComponent from './pages/NavBarComponent.vue'
import OperationStatusScreen from '@/components/pages/OperationStatusScreen.vue'

export default {
  name: 'RealTimeAndon',
  components: {
    NavBarComponent,
    OperationStatusScreen,
  },
}
</script>

<style scoped>
.operationStatusContainer {
  align-items: center;
  justify-content: center;
}
.lineOperationStatus {
  min-width: 30.8rem;
  max-width: 30.8rem;
}
.imageOperationStatus {
  min-width: 20rem;
}
</style>


// operationstatusscreen

<template>
  <v-container fluid>
    <v-row>
      <v-col cols="12"><common-table></common-table> </v-col>
      <v-col class="ma-2">
        <canvas ref="myCanvas" width="416" height="700" class="canvas"></canvas>
      </v-col>
    </v-row>
  </v-container>
</template>

<script>
import { FetchAPI } from '@/utility/apiRequest'
import CommonTable from '../common/CommonTable.vue'

export default {
  name: 'OperationStatusScreen',
  components: {
    CommonTable,
  },
  data() {
    return {
      imageUrl: null,
      rectangles: [],
    }
  },
  mounted() {
    this.fetchImage()
  },
  methods: {
    /**
     * Function use for getting the image
     */
    async fetchImage() {
      try {
        const api = new FetchAPI()
        const response = await api.get('/assets/images/line_chart.png', {
          responseType: 'blob',
        })
        this.imageUrl = URL.createObjectURL(response)
        this.createCanvas(this.imageUrl)
      } catch (err) {
        console.log(err)
      }
    },
    /**
     * Retrieves the operation process coordinates
     */
    async fetchProcessCoordinates() {
      try {
        const api = new FetchAPI()
        const response = await api.get('/api/get-coordinates')
        this.rectangles = [...response.data]
      } catch (error) {
        console.log(error)
      }
    },
    /**
     * Create boxes with number label
     * @param {string} imageURL - image URL
     */
    async createCanvas(imageURL) {
      await this.fetchProcessCoordinates()
      const canvas = this.$refs.myCanvas
      const ctx = canvas.getContext('2d')
      const image = new Image()
      image.src = imageURL
      const drawCircleLabel = (ctx, x, y, radius, label, fillStyle, strokeStyle) => {
        ctx.beginPath()
        ctx.arc(x, y, radius, 0, Math.PI * 2)
        ctx.closePath()
        ctx.fillStyle = fillStyle
        ctx.fill()
        ctx.strokeStyle = strokeStyle
        ctx.stroke()
        ctx.font = 'bold 14px Arial'
        ctx.textAlign = 'center'
        ctx.textBaseline = 'middle'
        ctx.fillStyle = 'white'
        ctx.fillText(label, x, y)
      }
      image.onload = () => {
        ctx.drawImage(image, 0, 0, canvas.width, canvas.height)

        this.rectangles.forEach((rect) => {
          ctx.fillStyle = this.determineColor(rect.operation_status)
          ctx.fillRect(rect.x, rect.y, rect.width, rect.height)
          ctx.strokeStyle = 'white'
          ctx.lineWidth = 3
          ctx.strokeRect(rect.x, rect.y, rect.width, rect.height)
          const circleX = rect.x + rect.width / 2
          const circleY = rect.y + rect.height / 2
          drawCircleLabel(ctx, circleX, circleY, 15, rect.process_id, 'transparent', 'white')
        })
      }
    },
    /**
     * Determines the color of the operation based on the status value
     * @param {int} status - status value of the operation
     * @returns {string} color based on the status
     */
    determineColor(status) {
      let statusColor = ''

      switch (status) {
        case 1: // 稼働中 In operation
          statusColor = 'green'
          break
        case 2: // 準備中 preparation
          statusColor = '#FFCA37'
          break
        case 3: // 異常停止 abnormal stop
          statusColor = 'red'
          break
        default:
          statusColor = 'grey'
      }

      return statusColor
    },
  },
}
</script>
<style>
.custom-table th,
.custom-table td {
  border: 1px solid #ffffff;
  padding: 5px;
  font-size: 22px;
  color: #ffffff;
}

.operationStatus {
  background-color: green;
}

.lineChartImage {
  width: 26rem;
  max-width: 30rem;
}
</style>


// navbarcomponent

<template>
  <v-container fluid class="bg-grey-darken-4">
    <v-row no-gutters align="center" justify="center">
      <v-col cols="12" sm="9" class="bg-grey-darken-4">
        <common-label :item="appTitle" />
      </v-col>

      <v-col cols="12" sm="3" class="text-sm-right bg-grey-darken-4">
        <date-time-component></date-time-component>
      </v-col>
    </v-row>
  </v-container>
</template>

<script>
import CommonLabel from '@/components/common/CommonLabel.vue'
import { NAVBAR_TITLE_LABEL } from '@/common/recipe/rLabels'
import DateTimeComponent from '@/components/pages/NavBarComponent/DateTimeComponent.vue'

export default {
  name: 'NavBarComponent',
  components: {
    CommonLabel,
    DateTimeComponent,
  },
  data() {
    return {
      appTitle: NAVBAR_TITLE_LABEL,
    }
  },
}
</script>

<style scoped>
.fw-bold {
  font-weight: bold;
}
.v-container {
  min-height: 4.5rem;
}
</style>


// datetimecomponent

<template>
  <common-label :item="currentDateTime" />
</template>

<script>
import { DateTime } from 'luxon'
import CommonLabel from '@/components/common/CommonLabel.vue'
import { NAVBAR_TITLE_LABEL, NAVBAR_DATETIME_LABEL } from '@/common/recipe/rLabels'

export default {
  name: 'dateTimeComponent',
  components: {
    CommonLabel,
  },
  data() {
    return {
      appTitle: NAVBAR_TITLE_LABEL,
      currentDateTime: JSON.parse(JSON.stringify(NAVBAR_DATETIME_LABEL)),
    }
  },
  mounted() {
    this.updateDateTime()
    this.updateInterval()
  },
  methods: {
    /**
     * Updates the current date and time using Moment.js.
     */
    updateDateTime() {
      const now = DateTime.now()
      this.currentDateTime.display.label = now.toFormat('yyyy/dd/MM HH:mm:ss')
    },
    /**
     * Sets the interval for updating the date and time
     */
    updateInterval() {
      setInterval(this.updateDateTime, 1000)
    },
  },
}
</script>


// commontable

<template>
  <v-table class="custom-table">
    <thead>
      <tr>
        <th
          v-show="TABLE_PROPERTIES.TABLE_HEADER.length != 0"
          v-for="(column, columnIndex) in TABLE_PROPERTIES.TABLE_HEADER"
          :key="columnIndex"
          v-bind="column.directives"
        >
          <common-label :item="column"></common-label>
        </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td
          v-show="TABLE_PROPERTIES.TABLE_ROW.length != 0"
          v-for="(column, columnIndex) in TABLE_PROPERTIES.TABLE_ROW"
          :key="columnIndex"
          v-bind="column.directives"
        >
          <common-label :item="column"></common-label>
        </td>
      </tr>
    </tbody>
  </v-table>
</template>

<script>
import { DEFAULT_TABLE_PROPERTIES } from '@/common/recipe/rTables'
import CommonLabel from './CommonLabel.vue'
export default {
  components: { CommonLabel },
  name: 'CommonTable',
  data() {
    return {
      TABLE_PROPERTIES: { ...DEFAULT_TABLE_PROPERTIES },
    }
  },
}
</script>


// commonlabel

<template>
  <label v-bind="item.directives">{{ item.display.label }}</label>
</template>

<script>
export default {
  name: 'CommonLabel',
  /**
   * @description
   * Receives object of data
   * * @object directives:
   * - directives {Object} - includes attributes of the component
   * - label {String} - text label of the component
   */
  props: {
    item: {
      type: Object,
      required: true,
    },
  },
}
</script>

//  rTables

const TABLE_OPERATIONAL_STATUS = [
  {
    display: {
      label: '稼働状況',
    },
    directives: {
      class: '',
    },
  },
  {
    display: {
      label: '異常発生中',
    },
    directives: {
      class: '',
    },
  },
]

const DEFAULT_TABLE_PROPERTIES = {
  TABLE_HEADER: [
    {
      COMPONENT_NAME: 'CommonLabel',
      display: {
        label: '稼働状況',
      },
      directives: {
        style: {
          fontWeight: 'bold',
          width: '14rem',
          backgroundColor: '#333333',
          borderColor: 'white',
          textAlign: 'center',
        },
      },
    },
    {
      COMPONENT_NAME: 'CommonLabel',
      display: {
        label: '稼働中',
      },
      directives: {
        class: 'operationStatus',
        style: {
          fontWeight: 'bold',
          width: '9rem',
          borderColor: 'white',
          textAlign: 'center',
        },
      },
    },
  ],
  TH_DIRECTIVES: {
    class: 'custom-table',
  },

  TABLE_ROW: [],
}

export { TABLE_OPERATIONAL_STATUS, DEFAULT_TABLE_PROPERTIES }


// rLabels

const NAVBAR_TITLE_LABEL = {
  componentName: 'CommonLabel',
  data: {
    saveAs: 'appTitle',
  },
  display: {
    label: 'GSP3ミリ波1号ライン',
  },
  directives: {
    class: 'fw-bold fs-2 text-h4',
  },
}

const NAVBAR_DATETIME_LABEL = {
  componentName: 'CommonLabel',
  data: {
    saveAs: 'datetime',
  },
  display: {
    label: '',
  },
  directives: {
    class: 'fs-2 text-h6',
  },
}

export { NAVBAR_TITLE_LABEL, NAVBAR_DATETIME_LABEL }


// apiRequest

import axios from 'axios'
import { API_BASE_URL } from '@/enviroment'

/**
 * Initialization of all API Requests.
 */
export class FetchAPI {
  /**
   * Send get request
   * @param {String} uri - uri of the database
   * @param {Object} obj - check for the new reference
   * @return {Object} response.data - the response from the backend
   */
  async get(uri, obj = {}) {
    let response
    try {
      response = await axios.get(API_BASE_URL + uri, obj)
    } catch (error) {
      response = {
        data: {
          success: false,
          message_response: error.message,
          message_content: error.message,
        },
      }
    }
    return response.data
  }
}

// environment

/**
 * Set Api Base Url
 * @return {String}
 */
function getApiBaseUrl() {
  const env = process.env.NODE_ENV
  if (env === 'development') {
    return 'http://localhost:5000'
  }

  const url = window.location.origin + '/'
  return url
}

const API_BASE_URL = getApiBaseUrl()
export { API_BASE_URL }


#########

## a_image

from flask import Blueprint, send_from_directory


image_router = Blueprint("a_image", __name__)

@image_router.route("/assets/images/<filename>", methods=['GET'])
def get_image_url(filename):
    """Api for getting the images

    Args:
        filename (String): the file path for the images  

    Returns:
        dict: api response
    """    
    return send_from_directory('assets/images', filename)


## a_oepration_information

from src.setup_db_example.models.m_operation_information import OperationInformationDb
from flask import Blueprint

operation_information_router = Blueprint("a_operation_", __name__)

@operation_information_router.route("/api/get-coordinates", methods=["GET"])
def get_coordinates():
    """Fetch all the coordinates

    Returns:
        dict: return the api response
    """   
    operation = OperationInformationDb
    process = operation.query.filter(operation.process_id <= 14).order_by(operation.process_id).all()
    print(process)
    operation_data = []
    for data in process:
        operation_data_dict = {
            "process_id": data.process_id,
            "operation_status": data.operation_status,
            "x": data.coordinates.x_position,
            "y": data.coordinates.y_position,
            "width": data.coordinates.width,
            "height": data.coordinates.height,
        }
        operation_data.append(operation_data_dict)
    return{
        "success": True,
        "message_response": "COORDINATES FETCHED SUCCESSFULLY",
        "message_content": "COORDINATES fetched successfully",
        "data": operation_data
        }, 200

## m_coordinates

from src.setup_db_example.database import db

class CoordinatesDb(db.Model):
    """Represents a model for storing the data in coordinates_tbl

    Args:
        db (sqlalchemy): SQLAlchemy engine
    """

    __tablename__ = "coordinates_tbl"
    coordinates_id = db.Column(db.Integer, primary_key=True)
    x_position = db.Column(db.Integer, nullable=False)
    y_position = db.Column(db.Integer, nullable=False)
    width = db.Column(db.Integer, nullable=False)
    height = db.Column(db.Integer, nullable=False)
    operation_information = db.relationship('OperationInformationDb', back_populates='coordinates')

## m_operation_information

from src.setup_db_example.database import db

class OperationInformationDb(db.Model):
    """Represents a model for storing the data in operation_information_tbl

    Args:
        db (sqlalchemy): SQLAlchemy engine
    """

    __tablename__ = "operation_information_tbl"
    process_id = db.Column(db.Integer, primary_key=True)
    process_name = db.Column(db.String(128), nullable=False)
    operation_status = db.Column(db.Integer, nullable=False)
    product_number = db.Column(db.Integer, nullable=False)
    facility_cycle_time = db.Column(db.Float(3), nullable=False)
    coordinates_id = db.Column(db.Integer, db.ForeignKey("coordinates_tbl.coordinates_id"), nullable=False, unique=True)
    coordinates = db.relationship('CoordinatesDb', back_populates="operation_information")


## s_coordinates

from src.setup_db_example.models.m_coordinates import CoordinatesDb
from marshmallow_sqlalchemy import SQLAlchemyAutoSchema
from flask_marshmallow import Marshmallow

ma = Marshmallow()


class CoordinatesSchema(SQLAlchemyAutoSchema):
    """
    This class positions schema with the corresponding db table model

    Args:
        SQLAlchemyAutoSchema (sqlalchemy): SQLAlchemy engine
    """
    class Meta:
        """Meta Class
        """

        model = CoordinatesDb
        load_instance = True            

## s_operation_information

from marshmallow_sqlalchemy import SQLAlchemyAutoSchema
from flask_marshmallow import Marshmallow
from src.setup_db_example.models.m_operation_information import OperationInformationDb
from src.setup_db_example.schemas.s_coordinates import CoordinatesSchema

ma = Marshmallow()


class OperationInformationSchema(SQLAlchemyAutoSchema):
    """
    This class positions schema with the corresponding db table model

    Args:
        SQLAlchemyAutoSchema (sqlalchemy): SQLAlchemy engine
    """

    class Meta:
        """Meta Class
        """    


        model = OperationInformationDb
        load_instance = True
        include_relationships = True

    ma.Nested(CoordinatesSchema)    

## database.py

from flask_sqlalchemy import SQLAlchemy
from sqlalchemy.exc import SQLAlchemyError
from sqlalchemy.sql import text
from flask_migrate import Migrate, upgrade, init
from time import sleep
import os


# Create instances of SQLAlchemy and Migrate
db = SQLAlchemy()
migrate = Migrate()


def initialize_database(app):
    app.config["SQLALCHEMY_TRACK_MODIFICATIONS"] = True
    app.config["SQLALCHEMY_DATABASE_URI"] = os.getenv(
        "DATABASE_URL", "postgresql://postgres:postgres@db-nexus_app:5432/db_nexus_app"
    )
    app.config["DEBUG"] = True
    # app.config["SQLALCHEMY_BINDS"] = {"db2": "postgresql://postgres:postgres@db-nexus_app2:5432/db_nexus_app2"}

    db.init_app(app)
    migrate.init_app(app, db)

    # Import your models here so they are registered with SQLAlchemy
    from src.setup_db_example.models.m_coordinates import CoordinatesDb
    from src.setup_db_example.models.m_operation_information import OperationInformationDb

    sleep(2)  # wait for 2 seconds for the TCP to be initialized

    if not os.path.isdir("/usr/opt/nexus-app/backend/migrations"):
        init()
    print("Alembic Migration Initialized")
    __upgrade_database__(app)


def __upgrade_database__(app):
    with app.app_context():
        upgrade()
        print("Database upgraded successfully.")


## app

from flask import Flask
from flask_cors import CORS
from src.setup_db_example.database import initialize_database
from src.setup_db_example.api.a_image import image_router
from src.setup_db_example.api.a_operation_information import operation_information_router

def create_app():
    app = Flask(__name__)
    CORS(app)

    # Setup Database
    initialize_database(app)
    app.register_blueprint(image_router)
    app.register_blueprint(operation_information_router)
    return app




////////////////// 

// operationstatusscreen.spec.js

import { shallowMount } from '@vue/test-utils'
import OperationStatusScreen from '@/components/pages/OperationStatusScreen.vue'
import FetchAPI from '@/utility/apiRequest'
import 'jest-canvas-mock'

jest.mock('@/utility/apiRequest', () => {
  return jest.fn().mockImplementation(() => ({
    get: jest.fn(() => Promise.resolve({ success: true, data: [] })),
  }))
})

jest.spyOn(console, 'log').mockImplementation(() => {
  return
})

describe('Testing OperationStatusScreen.vue', () => {
  const mockBlobUrl = 'blob:http://example.com/fake-blob-url'

  let wrapper
  global.URL.createObjectURL = jest.fn().mockReturnValue(mockBlobUrl)
  beforeEach(() => {
    wrapper = shallowMount(OperationStatusScreen, {
      global: {
        components: {
          VSimpleTable: 'v-simple-table',
          VContainer: 'v-container',
          VCol: 'v-col',
          VRow: 'v-row',
        },
      },
      $refs: {
        myCanvas: document.createElement('canvas'),
      },
      fetchProcessCoordinates: jest.fn().mockResolvedValue(),
      determineColor: jest.fn().mockReturnValue('#FF0000'),
      rectangles: [
        { x: 10, y: 20, width: 50, height: 50, operation_status: 1, process_id: 1 },
        { x: 70, y: 80, width: 50, height: 50, operation_status: 3, process_id: 2 },
      ],
    })
  })
  afterEach(() => {
    jest.restoreAllMocks() // Restore all mocks after each test
    delete global.URL.createObjectURL // Clean up the global mock
  })

  test('should not fetch an image and set imageUrl to null', () => {
    window.URL.createObjectURL = jest.fn(() => 'blob:http://localhost/image-url')
    const mockBlob = new Blob(['image content'], { type: 'image/png' })
    const mockApi = new FetchAPI()
    mockApi.get.mockResolvedValue(mockBlob)

    const mockCreateObjectURL = jest
      .spyOn(URL, 'createObjectURL')
      .mockReturnValue('blob:http://localhost/image-url')

    wrapper.vm.fetchImage()

    expect(wrapper.vm.imageUrl).toBe(null)
    mockCreateObjectURL.mockRestore()
  })

  test('renders the canvas element', () => {
    expect(wrapper.find('canvas').exists()).toBe(true)
  })

  test('fetchProcessCoordinates fetches and updates rectangles', async () => {
    await wrapper.vm.fetchProcessCoordinates()

    expect(wrapper.vm.rectangles).toHaveLength(0)
  })

  test('fetchProcessCoordinates fetches and updates rectangles', async () => {
    wrapper.setData({
      rectangles: [
        { width: 70, height: 40, x: 65, y: 515, process_id: 1, operation_status: 1 },
        { width: 70, height: 40, x: 65, y: 425, process_id: 2, operation_status: 1 },
        { width: 70, height: 40, x: 65, y: 350, process_id: 3, operation_status: 3 },

        { width: 70, height: 40, x: 150, y: 265, process_id: 4, operation_status: 3 },
        { width: 70, height: 40, x: 100, y: 190, process_id: 5, operation_status: 1 },
        { width: 70, height: 40, x: 35, y: 125, process_id: 6, operation_status: 1 },
        { width: 70, height: 40, x: 35, y: 45, process_id: 7, operation_status: 1 },
        { width: 70, height: 40, x: 185, y: 45, process_id: 8, operation_status: 1 },
        { width: 70, height: 40, x: 290, y: 115, process_id: 9, operation_status: 3 },
        { width: 70, height: 40, x: 290, y: 200, process_id: 10, operation_status: 1 },
        { width: 70, height: 40, x: 290, y: 335, process_id: 11, operation_status: 1 },
        { width: 70, height: 40, x: 290, y: 400, process_id: 12, operation_status: 3 },
        { width: 70, height: 40, x: 290, y: 500, process_id: 13, operation_status: 3 },
        { width: 70, height: 40, x: 240, y: 615, process_id: 14, operation_status: 1 },
      ],
    })

    await wrapper.vm.fetchProcessCoordinates()

    expect(wrapper.vm.rectangles).toHaveLength(14)
  })

  test('should returns correct color for status when determineColor is called with specific parameters', () => {
    expect(wrapper.vm.determineColor(1)).toBe('green')
    expect(wrapper.vm.determineColor(2)).toBe('#FFCA37')
    expect(wrapper.vm.determineColor(3)).toBe('red')
    expect(wrapper.vm.determineColor(4)).toBe('grey')
  })
})

describe('createCanvas', () => {
  let wrapper
  const mockBlobUrl = 'blob:http://example.com/fake-blob-url'

  beforeEach(() => {
    wrapper = shallowMount(OperationStatusScreen, {
      global: {
        components: {
          VSimpleTable: 'v-simple-table',
          VContainer: 'v-container',
          VCol: 'v-col',
          VRow: 'v-row',
        },
      },
      $refs: {
        myCanvas: document.createElement('canvas'),
      },
      fetchProcessCoordinates: jest.fn().mockResolvedValue(),
      rectangles: [
        { x: 10, y: 20, width: 50, height: 50, operation_status: 1, process_id: 1 },
        { x: 70, y: 80, width: 50, height: 50, operation_status: 3, process_id: 2 },
      ],
    })

    // Mock URL.createObjectURL
    global.URL.createObjectURL = jest.fn().mockReturnValue(mockBlobUrl)
  })

  afterEach(() => {
    jest.restoreAllMocks() // Restore all mocks after each test
    delete global.URL.createObjectURL // Clean up the global mock
  })

  it('should create a blob URL and draw on the canvas', async () => {
    const response = new Blob(['image data'], { type: 'image/png' })
    const imageURL = URL.createObjectURL(response)

    // Mock the image loading
    const mockImage = new Image()
    mockImage.onload = jest.fn() // Mock the onload function
    jest.spyOn(window, 'Image').mockImplementation(() => mockImage)

    // Create a mock context
    const ctx = {
      beginPath: jest.fn(),
      arc: jest.fn(),
      closePath: jest.fn(),
      fillStyle: '',
      fill: jest.fn(),
      strokeStyle: '',
      stroke: jest.fn(),
      font: '',
      textAlign: '',
      textBaseline: '',
      fillText: jest.fn(),
      drawImage: jest.fn(),
      fillRect: jest.fn(),
      lineWidth: 0,
      strokeRect: jest.fn(),
    }
    jest.spyOn(wrapper.vm.$refs.myCanvas, 'getContext').mockReturnValue(ctx)

    // Mock the fetchProcessCoordinates method
    wrapper.vm.fetchProcessCoordinates = jest.fn().mockResolvedValue()

    // Call the method
    await wrapper.vm.createCanvas(imageURL)

    // Manually trigger the onload event
    mockImage.onload()

    // Assertions
    expect(URL.createObjectURL).toHaveBeenCalledWith(response)
    expect(wrapper.vm.fetchProcessCoordinates).toHaveBeenCalled()
    expect(ctx.drawImage).toHaveBeenCalledWith(
      mockImage,
      0,
      0,
      wrapper.vm.$refs.myCanvas.width,
      wrapper.vm.$refs.myCanvas.height,
    )
    expect(ctx.fillRect).toHaveBeenCalledTimes(0)
    expect(ctx.strokeRect).toHaveBeenCalledTimes(0)
  })
})
