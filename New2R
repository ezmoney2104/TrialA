import { shallowMount } from '@vue/test-utils'
import OperationStatusScreen from '@/components/pages/OperationStatusScreen.vue'
import FetchAPI from '@/utility/apiRequest'
import 'jest-canvas-mock'

jest.mock('@/utility/apiRequest', () => {
  return jest.fn().mockImplementation(() => ({
    get: jest.fn(() => Promise.resolve({ success: true, data: [] })),
  }))
})

describe('Testing OperationStatusScreen.vue', () => {
  const mockBlobUrl = 'blob:http://example.com/fake-blob-url'

  let wrapper
  global.URL.createObjectURL = jest.fn().mockReturnValue(mockBlobUrl)
  beforeEach(() => {
    wrapper = shallowMount(OperationStatusScreen, {
      global: {
        components: {
          VSimpleTable: 'v-simple-table',
          VContainer: 'v-container',
          VCol: 'v-col',
          VRow: 'v-row',
        },
      },
      $refs: {
        myCanvas: document.createElement('canvas'),
      },
      fetchProcessCoordinates: jest.fn().mockResolvedValue(),
      determineColor: jest.fn().mockReturnValue('#FF0000'),
      rectangles: [
        { x: 10, y: 20, width: 50, height: 50, operation_status: 1, process_id: 1 },
        { x: 70, y: 80, width: 50, height: 50, operation_status: 3, process_id: 2 },
      ],
    })
  })
  afterEach(() => {
    jest.restoreAllMocks()
    delete global.URL.createObjectURL
  })

  test('should not fetch an image and set imageUrl to null', () => {
    window.URL.createObjectURL = jest.fn(() => 'blob:http://localhost/image-url')
    const mockBlob = new Blob(['image content'], { type: 'image/png' })
    const mockApi = new FetchAPI()
    mockApi.get.mockResolvedValue(mockBlob)

    const mockCreateObjectURL = jest
      .spyOn(URL, 'createObjectURL')
      .mockReturnValue('blob:http://localhost/image-url')

    wrapper.vm.fetchImage()

    expect(wrapper.vm.imageUrl).toBe(null)
    mockCreateObjectURL.mockRestore()
  })

  test('renders the canvas element', () => {
    expect(wrapper.find('canvas').exists()).toBe(true)
  })

  test('fetchProcessCoordinates fetches and updates rectangles', async () => {
    await wrapper.vm.fetchProcessCoordinates()

    expect(wrapper.vm.rectangles).toHaveLength(0)
  })

  test('fetchProcessCoordinates fetches and updates rectangles', async () => {
    wrapper.setData({
      rectangles: [
        { width: 70, height: 40, x: 65, y: 515, process_id: 1, operation_status: 1 },
        { width: 70, height: 40, x: 65, y: 425, process_id: 2, operation_status: 1 },
        { width: 70, height: 40, x: 65, y: 350, process_id: 3, operation_status: 3 },
        { width: 70, height: 40, x: 150, y: 265, process_id: 4, operation_status: 3 },
        { width: 70, height: 40, x: 100, y: 190, process_id: 5, operation_status: 1 },
        { width: 70, height: 40, x: 35, y: 125, process_id: 6, operation_status: 1 },
        { width: 70, height: 40, x: 35, y: 45, process_id: 7, operation_status: 1 },
        { width: 70, height: 40, x: 185, y: 45, process_id: 8, operation_status: 1 },
        { width: 70, height: 40, x: 290, y: 115, process_id: 9, operation_status: 3 },
        { width: 70, height: 40, x: 290, y: 200, process_id: 10, operation_status: 1 },
        { width: 70, height: 40, x: 290, y: 335, process_id: 11, operation_status: 1 },
        { width: 70, height: 40, x: 290, y: 400, process_id: 12, operation_status: 3 },
        { width: 70, height: 40, x: 290, y: 500, process_id: 13, operation_status: 3 },
        { width: 70, height: 40, x: 240, y: 615, process_id: 14, operation_status: 1 },
      ],
    })

    await wrapper.vm.fetchProcessCoordinates()

    expect(wrapper.vm.rectangles).toHaveLength(14)
  })

  test('should returns correct color for status when determineColor is called with specific parameters', () => {
    expect(wrapper.vm.determineColor(1)).toBe('green')
    expect(wrapper.vm.determineColor(2)).toBe('#FFCA37')
    expect(wrapper.vm.determineColor(3)).toBe('red')
    expect(wrapper.vm.determineColor(4)).toBe('grey')
  })
})

jest.spyOn(console, 'log').mockImplementation(() => {
  return
})

describe('createCanvas', () => {
  let wrapper
  const mockBlobUrl = 'blob:http://example.com/fake-blob-url'

  beforeEach(() => {
    wrapper = shallowMount(OperationStatusScreen, {
      global: {
        components: {
          VSimpleTable: 'v-simple-table',
          VContainer: 'v-container',
          VCol: 'v-col',
          VRow: 'v-row',
        },
      },
      $refs: {
        myCanvas: document.createElement('canvas'),
      },
      fetchProcessCoordinates: jest.fn().mockResolvedValue(),
      rectangles: [
        { x: 10, y: 20, width: 50, height: 50, operation_status: 1, process_id: 1 },
        { x: 70, y: 80, width: 50, height: 50, operation_status: 3, process_id: 2 },
      ],
    })

    global.URL.createObjectURL = jest.fn().mockReturnValue(mockBlobUrl)
  })

  afterEach(() => {
    jest.restoreAllMocks()
    delete global.URL.createObjectURL
  })

  it('should create a blob URL and draw on the canvas', async () => {
    const response = new Blob(['image data'], { type: 'image/png' })
    const imageURL = URL.createObjectURL(response)

    const mockImage = new Image()
    mockImage.onload = jest.fn()
    jest.spyOn(window, 'Image').mockImplementation(() => mockImage)

    const ctx = {
      beginPath: jest.fn(),
      arc: jest.fn(),
      closePath: jest.fn(),
      fillStyle: '',
      fill: jest.fn(),
      strokeStyle: '',
      stroke: jest.fn(),
      font: '',
      textAlign: '',
      textBaseline: '',
      fillText: jest.fn(),
      drawImage: jest.fn(),
      fillRect: jest.fn(),
      lineWidth: 0,
      strokeRect: jest.fn(),
    }
    jest.spyOn(wrapper.vm.$refs.myCanvas, 'getContext').mockReturnValue(ctx)
    wrapper.vm.fetchProcessCoordinates = jest.fn().mockResolvedValue()
    await wrapper.vm.createCanvas(imageURL)
    mockImage.onload()
    expect(URL.createObjectURL).toHaveBeenCalledWith(response)
    expect(wrapper.vm.fetchProcessCoordinates).toHaveBeenCalled()
    expect(ctx.drawImage).toHaveBeenCalledWith(
      mockImage,
      0,
      0,
      wrapper.vm.$refs.myCanvas.width,
      wrapper.vm.$refs.myCanvas.height,
    )
    expect(ctx.fillRect).toHaveBeenCalledTimes(0)
    expect(ctx.strokeRect).toHaveBeenCalledTimes(0)
  })
})
------------------------
import { shallowMount } from '@vue/test-utils'
import RealTimeAndon from '@/components/RealTimeAndon.vue'

jest.mock('@/utility/apiRequest', () => {
  return jest.fn().mockImplementation(() => ({
    get: jest.fn(() => Promise.resolve({ success: true, data: [] })),
  }))
})

jest.spyOn(console, 'log').mockImplementation(() => {
  return
})

describe('Testing RealTimeAndon.vue', () => {
  const wrapper = shallowMount(RealTimeAndon, {
    global: {
      components: {
        VApp: 'V-app',
        VAppBar: 'v-app-bar',
        VSheet: 'v-sheet',
        VCol: 'v-col',
        VRow: 'v-row',
        VMain: 'v-main',
        VLayout: 'v-layout',
        NavBarComponent: 'NavBarComponent',
        LineChartAndIndicator: 'line-chart-and-indicator',
        VContainer: 'v-container',
      },
    },
  })

  test('Test if wrapper exist', () => {
    expect(wrapper.exists()).toBeTruthy()
  })
})
--------------------------
<template>
  <v-container fluid>
    <v-row>
      <v-col cols="12"><common-table :style="determineBackgroundColor()"></common-table> </v-col>
      <v-col class="ma-2">
        <canvas ref="myCanvas" width="416" height="700" class="canvas"></canvas>
      </v-col>
    </v-row>
  </v-container>
</template>

<script>
import { FetchAPI } from '@/utility/apiRequest'
import CommonTable from '../common/CommonTable.vue'

export default {
  name: 'OperationStatusScreen',
  components: {
    CommonTable,
  },
  props: {
    coordinates: Array,
    operation: Number,
  },
  data() {
    return {
      imageUrl: null,
    }
  },
  mounted() {
    this.fetchImage()
  },
  watch: {
    coordinates: {
      handler(newCoordinates) {
        this.createCanvas(this.imageUrl, newCoordinates)
      },
      immediate: true,
    },
  },
  methods: {
    /**
     * Function use for getting the image
     */
    async fetchImage() {
      try {
        const api = new FetchAPI()
        const response = await api.get('/assets/images/line_chart.png', {
          responseType: 'blob',
        })
        this.imageUrl = URL.createObjectURL(response)
        this.createCanvas(this.imageUrl, this.coordinates)
        console.log(this.operation)
      } catch (err) {
        console.log(err)
      }
    },
    /**
     * Retrieves the operation process coordinates
     */
    async fetchProcessCoordinates() {
      return this.coordinates
    },
    /**
     * Create boxes with number label
     * @param {string} imageURL - image URL
     */
    async createCanvas(imageURL, rectangles) {
      await this.fetchProcessCoordinates()
      const canvas = this.$refs.myCanvas
      const ctx = canvas.getContext('2d')
      const image = new Image()
      image.src = imageURL
      const drawCircleLabel = (ctx, x, y, radius, label, fillStyle, strokeStyle) => {
        ctx.beginPath()
        ctx.arc(x, y, radius, 0, Math.PI * 2)
        ctx.closePath()
        ctx.fillStyle = fillStyle
        ctx.fill()
        ctx.strokeStyle = strokeStyle
        ctx.stroke()
        ctx.font = 'bold 14px Arial'
        ctx.textAlign = 'center'
        ctx.textBaseline = 'middle'
        ctx.fillStyle = 'white'
        ctx.fillText(label, x, y)
      }
      image.onload = () => {
        ctx.drawImage(image, 0, 0, canvas.width, canvas.height)

        rectangles.forEach((rect) => {
          ctx.fillStyle = this.determineColor(rect.operation_status)
          ctx.fillRect(rect.x, rect.y, rect.width, rect.height)
          ctx.strokeStyle = 'white'
          ctx.lineWidth = 3
          ctx.strokeRect(rect.x, rect.y, rect.width, rect.height)
          const circleX = rect.x + rect.width / 2
          const circleY = rect.y + rect.height / 2
          drawCircleLabel(ctx, circleX, circleY, 15, rect.process_id, 'transparent', 'white')
        })
      }
    },
    /**
     * Determines the color of the operation based on the status value
     * @param {int} status - status value of the operation
     * @returns {string} color based on the status
     */
    determineColor(status) {
      let statusColor = ''

      switch (status) {
        case 1: // 稼働中 In operation
          statusColor = 'green'
          break
        case 2: // 準備中 preparation
          statusColor = '#FFCA37'
          break
        case 3: // 異常停止 abnormal stop
          statusColor = 'red'
          break
        default:
          statusColor = 'grey'
      }
      return statusColor
    },
    /**
     * Function for changing the background color of the operation status label
     * @returns {Object} the style of the labe based on the  operation status
     */
    determineBackgroundColor() {
      const color = {
        1: 'green',
        2: '#FFCA37',
        3: 'red',
      }

      const font = {
        2: 'black',
      }

      return {
        backgroundColor: color[this.operation] || 'gray',
        color: font[this.operation] || 'white',
      }
    },
  },
}
</script>
<style>
.custom-table th,
.custom-table td {
  border: 1px solid #ffffff;
  padding: 5px;
  font-size: 22px;
}

.lineChartImage {
  width: 26rem;
  max-width: 30rem;
}
</style>
---------------------
<template>
  <v-app class="bg-surface-variant overflow-hidden">
    <NavBarComponent />
    <v-container fluid class="operationStatusContainer">
      <v-row>
        <v-col class="lineOperationStatus"
          ><operation-status-screen :coordinates="coordinates" :operation="operation">
          </operation-status-screen
        ></v-col>
        <v-col class="imageOperationStatus"></v-col>
      </v-row>
    </v-container>
  </v-app>
</template>

<script>
import NavBarComponent from './pages/NavBarComponent.vue'
import OperationStatusScreen from '@/components/pages/OperationStatusScreen.vue'
import { FetchAPI } from '@/utility/apiRequest'

export default {
  name: 'RealTimeAndon',
  components: {
    NavBarComponent,
    OperationStatusScreen,
  },
  data() {
    return {
      coordinates: [],
      operation: null,
    }
  },
  mounted() {
    this.fetchCoordinates()
  },
  // watch: {
  //   coordinates: function (newVal, oldVal) {
  //     return this.fetchCoordinates()
  //   },
  // },
  methods: {
    /**
     * Retrieves the operation process coordinates
     */

    async fetchCoordinates() {
      try {
        const api = new FetchAPI()
        const response = await api.get('/api/get-coordinates')
        this.coordinates = [...response.data]
        this.operation = this.coordinates[this.coordinates.length - 1].operation_status
      } catch (error) {
        console.log(error)
      }
    },
  },
}
</script>

<style scoped>
.operationStatusContainer {
  align-items: center;
  justify-content: center;
}
.lineOperationStatus {
  min-width: 30.8rem;
  max-width: 30.8rem;
}
.imageOperationStatus {
  min-width: 20rem;
}
</style>
