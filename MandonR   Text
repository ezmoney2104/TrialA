<template>
  <v-app class="bg-surface-variant overflow-hidden">
    <NavBarComponent />
    <v-container fluid class="operationStatusContainer">
      <v-row>
        <v-col class="lineOperationStatus"><OperationStatusScreen /></v-col>
        <v-col class="imageOperationStatus"></v-col>
      </v-row>
    </v-container>
  </v-app>
</template>

<script>
import NavBarComponent from './pages/NavBarComponent.vue'
import OperationStatusScreen from '@/components/pages/OperationStatusScreen.vue'

export default {
  name: 'RealTimeAndon',
  components: {
    NavBarComponent,
    OperationStatusScreen,
  },
}
</script>

<style scoped>
.operationStatusContainer {
  align-items: center;
  justify-content: center;
}
.lineOperationStatus {
  min-width: 30.8rem;
  max-width: 30.8rem;
}
.imageOperationStatus {
  min-width: 20rem;
}
</style>
--------------------------
<template>
  <v-container fluid>
    <v-row>
      <v-col cols="12"><common-table></common-table> </v-col>
      <v-col class="ma-2">
        <canvas ref="myCanvas" width="416" height="700" class="canvas"></canvas>
      </v-col>
    </v-row>
  </v-container>
</template>

<script>
import { FetchAPI } from '@/utility/apiRequest'
import CommonTable from '../common/CommonTable.vue'

export default {
  name: 'OperationStatusScreen',
  components: {
    CommonTable,
  },
  data() {
    return {
      imageUrl: null,
      rectangles: [],
    }
  },
  mounted() {
    this.fetchImage()
  },
  methods: {
    /**
     * Function use for getting the image
     */
    async fetchImage() {
      try {
        const api = new FetchAPI()
        const response = await api.get('/assets/images/line_chart.png', {
          responseType: 'blob',
        })
        this.imageUrl = URL.createObjectURL(response)
        this.createCanvas(this.imageUrl)
      } catch (err) {
        console.log(err)
      }
    },
    /**
     * Retrieves the operation process coordinates
     */
    async fetchProcessCoordinates() {
      try {
        const api = new FetchAPI()
        const response = await api.get('/api/get-coordinates')
        this.rectangles = [...response.data]
      } catch (error) {
        console.log(error)
      }
    },
    /**
     * Create boxes with number label
     * @param {string} imageURL - image URL
     */
    async createCanvas(imageURL) {
      await this.fetchProcessCoordinates()
      const canvas = this.$refs.myCanvas
      const ctx = canvas.getContext('2d')
      const image = new Image()
      image.src = imageURL
      const drawCircleLabel = (ctx, x, y, radius, label, fillStyle, strokeStyle) => {
        ctx.beginPath()
        ctx.arc(x, y, radius, 0, Math.PI * 2)
        ctx.closePath()
        ctx.fillStyle = fillStyle
        ctx.fill()
        ctx.strokeStyle = strokeStyle
        ctx.stroke()
        ctx.font = 'bold 14px Arial'
        ctx.textAlign = 'center'
        ctx.textBaseline = 'middle'
        ctx.fillStyle = 'white'
        ctx.fillText(label, x, y)
      }
      image.onload = () => {
        ctx.drawImage(image, 0, 0, canvas.width, canvas.height)

        this.rectangles.forEach((rect) => {
          ctx.fillStyle = this.determineColor(rect.operation_status)
          ctx.fillRect(rect.x, rect.y, rect.width, rect.height)
          ctx.strokeStyle = 'white'
          ctx.lineWidth = 3
          ctx.strokeRect(rect.x, rect.y, rect.width, rect.height)
          const circleX = rect.x + rect.width / 2
          const circleY = rect.y + rect.height / 2
          drawCircleLabel(ctx, circleX, circleY, 15, rect.process_id, 'transparent', 'white')
        })
      }
    },
    /**
     * Determines the color of the operation based on the status value
     * @param {int} status - status value of the operation
     * @returns {string} color based on the status
     */
    determineColor(status) {
      let statusColor = ''

      switch (status) {
        case 1: // 稼働中 In operation
          statusColor = 'green'
          break
        case 2: // 準備中 preparation
          statusColor = '#FFCA37'
          break
        case 3: // 異常停止 abnormal stop
          statusColor = 'red'
          break
        default:
          statusColor = 'grey'
      }

      return statusColor
    },
  },
}
</script>
<style>
.custom-table th,
.custom-table td {
  border: 1px solid #ffffff;
  padding: 5px;
  font-size: 22px;
  color: #ffffff;
}

.operationStatus {
  background-color: green;
}

.lineChartImage {
  width: 26rem;
  max-width: 30rem;
}
</style>
-----------
<template>
  <v-table class="custom-table">
    <thead>
      <tr>
        <th
          v-show="TABLE_PROPERTIES.TABLE_HEADER.length != 0"
          v-for="(column, columnIndex) in TABLE_PROPERTIES.TABLE_HEADER"
          :key="columnIndex"
          v-bind="column.directives"
        >
          <common-label :item="column"></common-label>
        </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td
          v-show="TABLE_PROPERTIES.TABLE_ROW.length != 0"
          v-for="(column, columnIndex) in TABLE_PROPERTIES.TABLE_ROW"
          :key="columnIndex"
          v-bind="column.directives"
        >
          <common-label :item="column"></common-label>
        </td>
      </tr>
    </tbody>
  </v-table>
</template>

<script>
import { DEFAULT_TABLE_PROPERTIES } from '@/common/recipe/rTables'
import CommonLabel from './CommonLabel.vue'
export default {
  components: { CommonLabel },
  name: 'CommonTable',
  data() {
    return {
      TABLE_PROPERTIES: { ...DEFAULT_TABLE_PROPERTIES },
    }
  },
}
</script>
---------------------------
<template>
  <label v-bind="item.directives">{{ item.display.label }}</label>
</template>

<script>
export default {
  name: 'CommonLabel',
  /**
   * @description
   * Receives object of data
   * * @object directives:
   * - directives {Object} - includes attributes of the component
   * - label {String} - text label of the component
   */
  props: {
    item: {
      type: Object,
      required: true,
    },
  },
}
</script>
-----------------
const NAVBAR_TITLE_LABEL = {
  componentName: 'CommonLabel',
  data: {
    saveAs: 'appTitle',
  },
  display: {
    label: 'GSP3ミリ波1号ライン',
  },
  directives: {
    class: 'fw-bold fs-2 text-h4',
  },
}

const NAVBAR_DATETIME_LABEL = {
  componentName: 'CommonLabel',
  data: {
    saveAs: 'datetime',
  },
  display: {
    label: '',
  },
  directives: {
    class: 'fs-2 text-h6',
  },
}

export { NAVBAR_TITLE_LABEL, NAVBAR_DATETIME_LABEL }

--------------------------
const TABLE_OPERATIONAL_STATUS = [
  {
    display: {
      label: '稼働状況',
    },
    directives: {
      class: '',
    },
  },
  {
    display: {
      label: '異常発生中',
    },
    directives: {
      class: '',
    },
  },
]

const DEFAULT_TABLE_PROPERTIES = {
  TABLE_HEADER: [
    {
      COMPONENT_NAME: 'CommonLabel',
      display: {
        label: '稼働状況',
      },
      directives: {
        style: {
          fontWeight: 'bold',
          width: '14rem',
          backgroundColor: '#333333',
          borderColor: 'white',
          textAlign: 'center',
        },
      },
    },
    {
      COMPONENT_NAME: 'CommonLabel',
      display: {
        label: '稼働中',
      },
      directives: {
        class: 'operationStatus',
        style: {
          fontWeight: 'bold',
          width: '9rem',
          borderColor: 'white',
          textAlign: 'center',
        },
      },
    },
  ],
  TH_DIRECTIVES: {
    class: 'custom-table',
  },

  TABLE_ROW: [],
}

export { TABLE_OPERATIONAL_STATUS, DEFAULT_TABLE_PROPERTIES }
--------------------- testing-----------------
import { shallowMount } from '@vue/test-utils'
import RealTimeAndon from '@/components/RealTimeAndon.vue'

jest.mock('@/utility/apiRequest', () => {
  return jest.fn().mockImplementation(() => ({
    get: jest.fn(() => Promise.resolve({ success: true, data: [] })),
  }))
})

jest.spyOn(console, 'log').mockImplementation(() => {
  return
})

describe('Testing RealTimeAndon.vue', () => {
  const wrapper = shallowMount(RealTimeAndon, {
    global: {
      components: {
        VApp: 'V-app',
        VAppBar: 'v-app-bar',
        VSheet: 'v-sheet',
        VCol: 'v-col',
        VRow: 'v-row',
        VMain: 'v-main',
        VLayout: 'v-layout',
        NavBarComponent: 'NavBarComponent',
        LineChartAndIndicator: 'line-chart-and-indicator',
        VContainer: 'v-container',
      },
    },
  })

  test('Test if wrapper exist', () => {
    expect(wrapper.exists()).toBeTruthy()
  })
})
-------------------------
import { shallowMount } from '@vue/test-utils'
import App from '@/App.vue'

jest.mock('@/utility/apiRequest', () => {
  return jest.fn().mockImplementation(() => ({
    get: jest.fn(() => Promise.resolve({ success: true, data: [] })),
  }))
})

describe('App.vue', () => {
  const wrapper = shallowMount(App, {
    global: {
      components: {
        VIcon: 'v-icon',
      },
    },
  })

  it('renders wrapper as existing', () => {
    expect(wrapper.exists()).toBeTruthy()
  })
})
-----------------
import { shallowMount } from '@vue/test-utils'
import OperationStatusScreen from '@/components/pages/OperationStatusScreen.vue'
import FetchAPI from '@/utility/apiRequest'

jest.mock('@/utility/apiRequest', () => {
  return jest.fn().mockImplementation(() => ({
    get: jest.fn(() => Promise.resolve({ success: true, data: [] })),
  }))
})

jest.spyOn(console, 'log').mockImplementation(() => {
  return
})

describe('Testing OperationStatusScreen.vue', () => {
  const wrapper = shallowMount(OperationStatusScreen, {
    global: {
      components: {
        VSimpleTable: 'v-simple-table',
        VContainer: 'v-container',
        VCol: 'v-col',
        VRow: 'v-row',
      },
    },
  })

  test('should not fetch an image and set imageUrl to null', () => {
    window.URL.createObjectURL = jest.fn(() => 'blob:http://localhost/image-url')
    const mockBlob = new Blob(['image content'], { type: 'image/png' })
    const mockApi = new FetchAPI()
    mockApi.get.mockResolvedValue(mockBlob)

    const mockCreateObjectURL = jest
      .spyOn(URL, 'createObjectURL')
      .mockReturnValue('blob:http://localhost/image-url')

    wrapper.vm.fetchImage()

    expect(wrapper.vm.imageUrl).toBe(null)
    expect()
    mockCreateObjectURL.mockRestore()
  })

  test('renders the canvas element', () => {
    expect(wrapper.find('canvas').exists()).toBe(true)
  })

  test('fetchProcessCoordinates fetches and updates rectangles', async () => {
    await wrapper.vm.fetchProcessCoordinates()

    expect(wrapper.vm.rectangles).toHaveLength(0)
  })

  test('fetchProcessCoordinates fetches and updates rectangles', async () => {
    wrapper.setData({
      rectangles: [
        { width: 70, height: 40, x: 65, y: 515, process_id: 1, operation_status: 1 },
        { width: 70, height: 40, x: 65, y: 425, process_id: 2, operation_status: 1 },
        { width: 70, height: 40, x: 65, y: 350, process_id: 3, operation_status: 3 },

        { width: 70, height: 40, x: 150, y: 265, process_id: 4, operation_status: 3 },
        { width: 70, height: 40, x: 100, y: 190, process_id: 5, operation_status: 1 },
        { width: 70, height: 40, x: 35, y: 125, process_id: 6, operation_status: 1 },
        { width: 70, height: 40, x: 35, y: 45, process_id: 7, operation_status: 1 },
        { width: 70, height: 40, x: 185, y: 45, process_id: 8, operation_status: 1 },
        { width: 70, height: 40, x: 290, y: 115, process_id: 9, operation_status: 3 },
        { width: 70, height: 40, x: 290, y: 200, process_id: 10, operation_status: 1 },
        { width: 70, height: 40, x: 290, y: 335, process_id: 11, operation_status: 1 },
        { width: 70, height: 40, x: 290, y: 400, process_id: 12, operation_status: 3 },
        { width: 70, height: 40, x: 290, y: 500, process_id: 13, operation_status: 3 },
        { width: 70, height: 40, x: 240, y: 615, process_id: 14, operation_status: 1 },
      ],
    })

    await wrapper.vm.fetchProcessCoordinates()

    expect(wrapper.vm.rectangles).toHaveLength(14)
  })

  test('should returns correct color for status when determineColor is called with specific parameters', () => {
    expect(wrapper.vm.determineColor(1)).toBe('green')
    expect(wrapper.vm.determineColor(2)).toBe('#FFCA37')
    expect(wrapper.vm.determineColor(3)).toBe('red')
    expect(wrapper.vm.determineColor(4)).toBe('grey')
  })
})
---------------------
import { shallowMount } from '@vue/test-utils'
import NavBarComponent from '@/components/pages/NavBarComponent.vue'

jest.useFakeTimers()
describe('Testing NavBarComponent.vue', () => {
  const wrapper = shallowMount(NavBarComponent, {
    global: {
      components: {
        VContainer: 'v-container',
        VCol: 'v-col',
        VRow: 'v-row',
      },
    },
  })

  test('Test if wrapper exist', () => {
    expect(wrapper.exists()).toBeTruthy()
  })
})
----------------
import DateTimeComponent from '@/components/pages/NavBarComponent/DateTimeComponent.vue'
import { shallowMount } from '@vue/test-utils'

import { DateTime } from 'luxon'
jest.useFakeTimers()
describe('Testing DateTimeComponent.vue', () => {
  const wrapper = shallowMount(DateTimeComponent, {
    global: {
      components: {
        VContainer: 'v-container',
        VCol: 'v-col',
        VRow: 'v-row',
      },
    },
  })

  test('Test if wrapper exist', () => {
    expect(wrapper.exists()).toBeTruthy()
  })

  test('Test the updates the date and time every second', async () => {
    jest.advanceTimersByTime(1000)

    const now = DateTime.now()
    const updatedFormattedTime = now.plus({ seconds: 0 }).toFormat('yyyy/dd/MM HH:mm:ss')

    wrapper.vm.updateDateTime()
    expect(wrapper.vm.currentDateTime.display.label).toBe(updatedFormattedTime)
  })
})
----------
import { shallowMount } from '@vue/test-utils'

import CommonLabel from '@/components/common/CommonLabel.vue'
describe('Testing CommonLabel.vue', () => {
  const wrapper = shallowMount(CommonLabel, {
    props: {
      item: {
        componentName: 'common-label',
        display: {},
        directives: {},
      },
    },
  })

  it('Test if wrapper exist', () => {
    expect(wrapper.exists()).toBeTruthy()
  })
})
---------------
import CommonTable from '@/components/common/CommonTable.vue'
import { shallowMount } from '@vue/test-utils'

describe('Testing CommonTable.vue', () => {
  const wrapper = shallowMount(CommonTable, {
    global: {
      components: {
        VTable: 'v-table',
      },
    },
    props: {
      item: {
        componentName: 'common-table',
        display: {},
        directives: {},
      },
    },
  })

  it('Test if wrapper exist', () => {
    expect(wrapper.exists()).toBeTruthy()
  })
})
