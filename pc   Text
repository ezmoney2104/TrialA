// puppyco

<template>
  <b-container fluid class="mx-auto my-4 w-75">
    <b-button>Add Puppy</b-button>

    <b-card class="mb-3">
      <puppy-registration-form></puppy-registration-form>
    </b-card>
    <b-card class="mb-3">
      <user-registration-page></user-registration-page>
    </b-card>

    <puppy-list></puppy-list>
  </b-container>
</template>

<script>
import PuppyList from './PuppyList.vue'
import PuppyRegistrationForm from './PuppyRegistrationForm.vue'
import UserRegistrationPage from './UserRegistrationForm.vue'

export default {
  name: 'PuppyCo',
  components: {
    UserRegistrationPage,
    PuppyRegistrationForm,
    PuppyList
  },
  methods: {
    getPuppies() {
      this.$emit('retrieveData')
    }
  }
}
</script>


// puppylist

<template>
  <div class="puppy-list">
    <h3>Puppy List</h3>
    <p v-if="puppies.length <= 0"><i>No puppy records existing!</i></p>
    <b-table
      v-else
      :items="puppies"
      :fields="fields"
      class="text-center"
      @fetchData="console.log('hiiii')"
    >
      <template #cell(actions)="data">
        <span class="d-inline-flex gap-2">
          <b-button variant="warning" @click="adoptPuppy(data.item)">Adopt</b-button>
          <b-button variant="danger" @click="deletePuppy(data.item)">Delete</b-button>
        </span>
      </template>
    </b-table>
  </div>
</template>

<script>
import { FetchAPI } from '@/utils/apiRequest'

export default {
  name: 'PuppyList',
  data() {
    return {
      puppies: [],
      fields: [
        { key: 'id', label: 'ID' },
        { key: 'name', label: 'Name' },
        { key: 'breed', label: 'Breed' },
        { key: 'birthdate', label: 'Birthdate' },
        { key: 'gender', label: 'Gender' },
        { key: 'size', label: 'Size' },
        // { key: 'adoption_status', label: 'Adoption Status' },
        { key: 'actions', label: 'Actions' }
      ]
    }
  },
  mounted() {
    this.getPuppies()
  },
  methods: {
    async getPuppies() {
      const api = new FetchAPI()
      const response = await api.get('/api/puppies')
      this.puppies = [...response.data]
    },
    async deletePuppy(puppy) {
      try {
        const response = await new FetchAPI().delete(`/api/puppies/${puppy.id}`)
        if (response.data.success) alert('Puppy deleted successfully!')
        this.getPuppies()
      } catch (error) {
        alert(error)
      }
    }

    // async adoptPuppy(puppy) {
    //   try {
    //     const api = new FetchAPI()
    //     const response = await api.post('/api/adoptions', {
    //       puppy_id: puppy.puppy_id,
    //       adopter_id: 1, // User ID
    //       adoption_date: new Date().toISOString().split('T')[0]
    //     })
    //     alert(response.message_response)
    //     // alert('Puppy adopted successfully!')
    //     // puppy.puppy_adopted_status = true
    //   } catch (error) {
    //     alert('Adoption failed!')
    //   }
    // }
  }
}
</script>


// puppyregform

<template>
  <div class="puppy-form">
    <h3>{{ formTitle }}</h3>
    <b-form @submit.prevent="addPuppy">
      <b-form-group label="Name">
        <b-form-input v-model="puppy.name" required></b-form-input>
      </b-form-group>
      <b-form-group label="Breed">
        <b-form-input v-model="puppy.breed" required></b-form-input>
      </b-form-group>
      <b-form-group label="Birthday">
        <b-form-input type="date" v-model="puppy.birthdate" required></b-form-input>
      </b-form-group>
      <b-form-group label="Gender">
        <b-form-select v-model="puppy.gender" :options="genderOptions" required></b-form-select>
      </b-form-group>
      <b-form-group label="Size">
        <b-form-select v-model="puppy.size" :options="sizeOptions" required></b-form-select>
      </b-form-group>
      <b-button type="submit" variant="success" class="my-2">Add Puppy</b-button>
    </b-form>
  </div>
</template>

<script>
import { FetchAPI } from '@/utils/apiRequest'

export default {
  name: 'PuppyRegistrationform',

  data() {
    return {
      formTitle: 'Add Puppy Details',
      puppy: {
        name: '',
        breed: '',
        birthdate: '',
        gender: null,
        size: null
      },
      genderOptions: [
        { text: 'Select gender', value: null, selected: true, disabled: true },
        { text: 'Male', value: 'male' },
        { text: 'Female', value: 'female' }
      ],
      sizeOptions: [
        { text: 'Select size', value: null, selected: true, disabled: true },
        { text: 'Small', value: 'sm' },
        { text: 'Medium', value: 'md' },
        { text: 'Large', value: 'lg' }
      ]
    }
  },
  methods: {
    async addPuppy() {
      try {
        const response = await new FetchAPI().post('/api/puppies', this.puppy)
        if (response.success) alert('Puppy added successfully!')
        this.$emit('fetchData')
      } catch (error) {
        alert('Failed to add puppy.')
      }
    }
  }
}
</script>


// userregform

<template>
  <div class="register">
    <h3>{{ formTitle }}</h3>
    <b-form @submit.prevent="registerUser">
      <b-form-group label="Name">
        <b-form-input v-model="registrationForm.name" placeholder="" required></b-form-input>
      </b-form-group>
      <b-form-group label="Email">
        <b-form-input v-model="registrationForm.email" type="email" required></b-form-input>
      </b-form-group>
      <b-form-group label="Phone">
        <b-form-input v-model="registrationForm.phone" required></b-form-input>
      </b-form-group>
      <b-form-group label="Address">
        <b-form-input v-model="registrationForm.address" required></b-form-input>
      </b-form-group>
      <b-button type="submit" variant="success" class="my-2">Register</b-button>
    </b-form>
  </div>
</template>

<script>
import { FetchAPI } from '@/utils/apiRequest'

export default {
  name: 'UserRegistrationPage',
  data() {
    return {
      formTitle: 'Add Owner Details',
      registrationForm: {
        name: '',
        email: '',
        phone: '',
        address: ''
      }
    }
  },
  methods: {
    async registerUser() {
      try {
        const api = new FetchAPI()
        const response = await api.post('/api/users/register', this.registrationForm)
        alert(response.message_response)
      } catch (error) {
        alert(error)
      }
    }
  }
}
</script>


// a_puppies

from flask import Blueprint, request
import traceback

# Import db
from src.setup_db_example.database import db
from src.setup_db_example.models.m_puppies_tbl import PuppyDb

from src.setup_db_example.schemas.s_puppies import PuppySchema

# Add routing
puppy_db_router = Blueprint("a_puppies", __name__)
# puppy_schema = PuppySchema()


# Create a new puppy
@puppy_db_router.route("/api/puppies", methods=["POST"])
def create_puppy():
    data = request.json.get("params")
    new_puppy = PuppyDb(
        puppy_name=data.get("name"),
        puppy_breed=data.get("breed"),
        puppy_birthdate=data.get("birthdate"),
        puppy_gender=data.get("gender"),
        puppy_size=data.get("size"),
    )
    db.session.add(new_puppy)
    db.session.commit()
    # new_puppy_data = puppy_schema.dump(new_puppy)
    # return {"puppy": new_puppy_data}, 200
    return {"success": True, "message_response": "Puppy adopted successfully"}, 200


###########
@puppy_db_router.route("/api/puppies", methods=["GET"])
def get_puppies():

    query = PuppyDb.query.all()

    puppies = []
    for data in query:
        formatBirtdate = data.puppy_birthdate.strftime("%d %B %Y")

        puppy_dict = {
            "id": data.puppy_id,
            "name": data.puppy_name,
            "birthdate": formatBirtdate,
            "breed": data.puppy_breed,
            "gender": data.puppy_gender,
            "size": data.puppy_size,
        }

        puppies.append(puppy_dict)

    return {
        "success": True,
        "message_response": "Puppy fetched successfully",
        "data": puppies,
    }, 200

    # puppies = PuppyDb.query.all()
    # puppies_data = puppies_schema.dump(puppies)

    # return {
    #     "success": True,
    #     "message_response": "Puppy fetched successfully",
    #     "data": puppies_data,
    # }, 200


@puppy_db_router.route("/api/puppies/<int:puppy_id>", methods=["DELETE"])
def delete_puppy(puppy_id):
    try:
        print("puppy id: ", puppy_id)
        if PuppyDb.query.filter(PuppyDb.puppy_id == str(puppy_id)).delete():
            db.session.commit()

            return {
                "success": True,
                "message_response": "Puppy deleted successfully",
                "data": None,
            }, 200

    except Exception as e:
        print(traceback.format_exc())

        return {
            "success": False,
            "message_response": f"Failed deleting the Puppy with id {puppy_id}",
            "data": None,
        }, 500


// a_users

from flask import Blueprint, request
from sqlalchemy import and_
import traceback


# Import db
from src.setup_db_example.database import db
from src.setup_db_example.models.m_users_tbl import UsersDb

from src.setup_db_example.schemas.s_users import UserSchema


# Add routing
users_db_router = Blueprint("a_users", __name__)


@users_db_router.route("/api/users/get", methods=["GET"])
def get_user():
    """Creates new user

    Returns:
        dict:
    """
    # data = request.json.get("params")

    try:

        query = db.session.query(UsersDb).all()
        users = UserSchema(many=True).dump(query)
        print(users)
        print("users", query)

        return {
            "success": True,
            "message_response": "REGISTRATION SUCCESSFUL",
            "data": users,
        }, 200

    except Exception as e:
        print(traceback.format_exc())

        return {"success": False, "message_response": "REGISTRATION FAILED"}, 500


#########################################
@users_db_router.route("/api/users/register", methods=["POST"])
def register_user():
    """Creates new user

    Returns:
        dict:
    """
    data = request.json.get("params")

    try:
        name = data.get("name")
        email = data.get("email")
        phone_number = data.get("phone")
        address = data.get("address")

        query = db.session.query(UsersDb).filter_by(user_email=email).first()

        if query:
            return ({"message_response": "Email already exists!"}), 400

        new_data = UsersDb(
            user_name=name,
            user_email=email,
            user_phone_number=phone_number,
            user_address=address,
        )

        db.session.add(new_data)
        db.session.commit()

        return {"success": True, "message_response": "REGISTRATION SUCCESSFUL"}, 200

    except Exception as e:
        print(traceback.format_exc())

        return {"success": False, "message_response": "REGISTRATION FAILED"}, 500


# @users_db_router.route("/api/users/login", methods=["POST"])
# # User log in
# def login_user():
#     data = request.json.get("params")

#     try:
#         email = data.get("email")
#         password = data.get("password")

#         if not email or not password:
#             raise Exception("Email and password are required!")

#         # Find user by email

#         user = (
#             db.session.query(UsersDb)
#             .filter(
#                 and_(UsersDb.user_email == email, UsersDb.user_password == password)
#             )
#             .first()
#         )

#         if not user:
#             raise Exception("Invalid email or password!")

#         # login successful
#         return ({"message": "Login successful!", "user_id": user.user_id}), 200

#     except Exception as e:
#         return ({"message": e}), 400


# from flask import Blueprint, request
# from sqlalchemy import and_
# import traceback


# # Import db
# from src.setup_db_example.database import db
# from src.setup_db_example.models.m_users_tbl import UsersDb
# from src.setup_db_example.schemas.s_users import UserSchema

# # Add routing
# users_db_router = Blueprint("a_users", __name__)


# @users_db_router.route("/api/users/register", methods=["POST"])
# def register_user():
#     """Creates new user

#     Returns:
#         dict:
#     """
#     data = request.json.get("params")

#     try:
#         name = data.get("name")
#         email = data.get("email")
#         phone_number = data.get("phone")
#         address = data.get("address")

#         query = db.session.query(UsersDb).filter_by(user_email=email).first()

#         if query:
#             return ({"message_response": "Email already exists!"}), 400

#         new_data = UsersDb(
#             user_name=name,
#             user_email=email,
#             user_phone_number=phone_number,
#             user_address=address,
#         )

#         db.session.add(new_data)
#         db.session.commit()

#         return {"success": True, "message_response": "REGISTRATION SUCCESSFUL"}, 200

#     except Exception as e:
#         print(traceback.format_exc())

#         return {"success": False, "message_response": "REGISTRATION FAILED"}, 500


# @users_db_router.route("/api/users/get", methods=["GET"])
# def get_user():
#     """Creates new user

#     Returns:
#         dict:
#     """
#     # data = request.json.get("params")

#     try:
#         # name = data.get("name")
#         # email = data.get("email")
#         # phone_number = data.get("phone")
#         # address = data.get("address")
#         # birthday = data.get("birthday")

#         query = db.session.query(UsersDb).all()
#         users = UserSchema(many=True).dump(query)
#         print(query)
#         # if query:
#         #     return ({"message_response": "Email already exists!"}), 400

#         # new_data = UsersDb(
#         #     user_name=name,
#         #     user_email=email,
#         #     user_phone_number=phone_number,
#         #     user_address=address,
#         #     user_birthday=birthday,
#         # )

#         # db.session.add(new_data)
#         # db.session.commit()

#         return {
#             "success": True,
#             "message_response": "REGISTRATION SUCCESSFUL",
#             "data": query,
#         }, 200

#     except Exception as e:
#         print(traceback.format_exc())

#         return {"success": False, "message_response": "REGISTRATION FAILED"}, 500


# # @users_db_router.route("/api/users/login", methods=["POST"])
# # # User log in
# # def login_user():
# #     data = request.json.get("params")

# #     try:
# #         email = data.get("email")
# #         password = data.get("password")

# #         if not email or not password:
# #             raise Exception("Email and password are required!")

# #         # Find user by email

# #         user = (
# #             db.session.query(UsersDb)
# #             .filter(
# #                 and_(UsersDb.user_email == email, UsersDb.user_password == password)
# #             )
# #             .first()
# #         )

# #         if not user:
# #             raise Exception("Invalid email or password!")

# #         # login successful
# #         return ({"message": "Login successful!", "user_id": user.user_id}), 200

# #     except Exception as e:
# #         return ({"message": e}), 400


// m_adoptions

from src.setup_db_example.database import db


class AdoptionDb(db.Model):
    __tablename__ = "adoptions_tbl"

    adoption_id = db.Column(db.Integer, primary_key=True)
    adopter_id = db.Column(
        db.Integer, db.ForeignKey("users_tbl.user_id"), nullable=False
    )
    puppy_id = db.Column(
        db.Integer, db.ForeignKey("puppies_tbl.puppy_id"), nullable=False
    )
    adoption_date = db.Column(db.Date, nullable=False)


//m_puppies

from src.setup_db_example.database import db
from src.setup_db_example.models.m_adoptions_tbl import AdoptionDb


class PuppyDb(db.Model):

    __tablename__ = "puppies_tbl"

    puppy_id = db.Column(db.Integer, primary_key=True)
    puppy_name = db.Column(db.String(24), nullable=False)
    puppy_breed = db.Column(db.String(48), nullable=False)
    puppy_birthdate = db.Column(db.Date, nullable=False)
    puppy_gender = db.Column(db.String(8), nullable=False)
    puppy_size = db.Column(db.String(3), nullable=False)

    adoptions_puppy_info = db.relationship(
        AdoptionDb, backref="adoptions_puppy", lazy=True, cascade="all, delete"
    )


// m_user

from src.setup_db_example.database import db
from src.setup_db_example.models.m_adoptions_tbl import AdoptionDb


class UsersDb(db.Model):
    __tablename__ = "users_tbl"

    user_id = db.Column(db.Integer, primary_key=True)
    user_name = db.Column(db.String(48), nullable=False)
    user_email = db.Column(db.String(48), nullable=False, unique=True)
    user_phone_number = db.Column(db.String(12), nullable=False)
    user_address = db.Column(db.String(96), nullable=False)

    adoptions_u_info = db.relationship(
        AdoptionDb, backref="adoptions_user_info", lazy=True, cascade="all, delete"
    )


// s_adoptions

from flask_marshmallow.fields import fields
from src.setup_db_example.models.m_adoptions_tbl import AdoptionDb
from src.setup_db_example.schemas import ma


class AdoptionSchema(ma.SQLAlchemySchema):
    """This class positions schema with the corresponding db table model"""

    class Meta:
        """Meta Class"""

        model = AdoptionDb
        load_instance = True


// s_puppies

# from flask_marshmallow.fields import fields
from flask_marshmallow import Marshmallow
from marshmallow_sqlalchemy import SQLAlchemyAutoSchema
from src.setup_db_example.models.m_puppies_tbl import PuppyDb

ma = Marshmallow()


class PuppySchema(SQLAlchemyAutoSchema):
    """This class positions schema with the corresponding db table model"""

    class Meta:
        """Meta Class"""

        model = PuppyDb
        load_instance = True


// s_users

from flask_marshmallow.fields import fields
from src.setup_db_example.models.m_users_tbl import UsersDb
from src.setup_db_example.models.m_adoptions_tbl import AdoptionDb

from marshmallow_sqlalchemy import SQLAlchemyAutoSchema
from flask_marshmallow import Marshmallow

ma = Marshmallow()


class UserSchema(SQLAlchemyAutoSchema):
    """This class positions schema with the corresponding db table model"""

    class Meta:
        """Meta Class"""

        model = UsersDb
        load_instance = True

    ma.Nested(AdoptionDb)


// environment.js

/**
 * Set Api Base Url
 * @return {String}
 */
function getApiBaseUrl() {
  const env = process.env.NODE_ENV
  if (env === 'development') {
    console.log('http://localhost:5000')
    return 'http://localhost:5000'
  }
  console.log(window.location.origin)

  const url = window.location.origin + '/'
  return url
}

const API_BASE_URL = getApiBaseUrl()
export { API_BASE_URL }


// apiRequest

import axios from 'axios'
import { API_BASE_URL } from '@/environment.js'
/**
 * Initialization of all API Requests.
 */
export class FetchAPI {
  /**
   * Send get request
   * @param {String} uri - uri of the database
   * @param {*} id
   * @return {Object} response.data - the response from the backend
   */
  async get(uri) {
    let response
    try {
      console.log(API_BASE_URL + uri)
      response = await axios.get(API_BASE_URL + uri)
    } catch (error) {
      response = {
        data: error?.response?.data
      }
    }
    return response?.data
  }
  /**
   * Send put request
   * @param {String} uri - uri of the database
   * @param {String} data - data to be updated to the database
   * @param{Number} good - non defective product
   * @return {Object} response.data - the response from the backend
   */
  async put(uri, data) {
    let response
    try {
      response = await axios.put(API_BASE_URL + uri, {
        params: data
      })
    } catch (error) {
      response = {
        data: error?.response?.data
      }
    }
    return response?.data
  }
  /**
   * Send put request
   * @param {String} uri - uri of the database
   * @param {String} data - data to be posted to the database
   * @return {Object} response.data - the response from the backend
   */
  async post(uri, data) {
    let response
    try {
      response = await axios.post(API_BASE_URL + uri, {
        params: data
      })
    } catch (error) {
      response = {
        data: error?.response?.data
      }
    }
    return response?.data
  }
  /**
   * Send put request
   * @param {String} uri - uri of the database
   * @param {Object} data - id to be reffered to the database
   * @return {Object} response.data - the response from the backend
   */
  async delete(uri, data) {
    let response
    try {
      response = await axios.delete(API_BASE_URL + uri, {
        params: data
      })
      return response
    } catch (error) {
      response = {
        data: error?.response?.data
      }

      return response?.data
    }
  }
}
