// app

<template>
  <real-time-andon />
</template>

<script>
import RealTimeAndon from '@/components/RealTimeAndon.vue'

export default {
  name: 'app',
  components: {
    RealTimeAndon,
  },
}
</script>


/// real time andon

<template>
  <v-app class="bg-surface-variant overflow-hidden">
    <NavBarComponent />
    <v-container fluid>
      <v-row>
        <OperationStatusScreen />
      </v-row>
    </v-container>
  </v-app>
</template>

<script>
import NavBarComponent from './pages/NavBarComponent.vue'
import OperationStatusScreen from '@/components/pages/OperationStatusScreen.vue'

export default {
  name: 'RealTimeAndon',
  components: {
    NavBarComponent,
    OperationStatusScreen,
  },
}
</script>


/// operationstatusscreen

<template>
  <v-container fluid>
    <v-row>
      <v-col cols="12"><common-table></common-table> </v-col>
      <v-col class="ma-2">
        <canvas ref="myCanvas" width="416" height="700" class="canvas"></canvas>
      </v-col>
    </v-row>
  </v-container>
</template>

<script>
import { FetchAPI } from '@/utility/apiRequest'
import CommonTable from '../common/CommonTable.vue'

export default {
  name: 'OperationStatusScreen',
  components: {
    CommonTable,
  },
  data() {
    return {
      imageUrl: null,
      rectangles: [],
    }
  },
  mounted() {
    this.fetchImage()
  },
  methods: {
    /**
     * Function use for getting the image
     */
    async fetchImage() {
      try {
        const api = new FetchAPI()
        const response = await api.get('/assets/images/line_chart.png', {
          responseType: 'blob',
        })
        this.imageUrl = URL.createObjectURL(response)
        this.createCanvas(this.imageUrl)
      } catch (err) {
        console.log(err)
      }
    },
    /**
     * Retrieves the operation process coordinates
     */
    async fetchProcessCoordinates() {
      try {
        const api = new FetchAPI()
        const response = await api.get('/api/get-coordinates')
        this.rectangles = [...response.data]
      } catch (error) {
        console.log(error)
      }
    },
    /**
     * Create boxes with number label
     * @param {string} imageURL - image URL
     */
    async createCanvas(imageURL) {
      await this.fetchProcessCoordinates()
      const canvas = this.$refs.myCanvas
      const ctx = canvas.getContext('2d')
      const image = new Image()
      image.src = imageURL
      const drawCircleLabel = (ctx, x, y, radius, label, fillStyle, strokeStyle) => {
        ctx.beginPath()
        ctx.arc(x, y, radius, 0, Math.PI * 2)
        ctx.closePath()
        ctx.fillStyle = fillStyle
        ctx.fill()
        ctx.strokeStyle = strokeStyle
        ctx.stroke()
        ctx.font = 'bold 14px Arial'
        ctx.textAlign = 'center'
        ctx.textBaseline = 'middle'
        ctx.fillStyle = 'white'
        ctx.fillText(label, x, y)
      }
      image.onload = () => {
        ctx.drawImage(image, 0, 0, canvas.width, canvas.height)

        this.rectangles.forEach((rect) => {
          ctx.fillStyle = this.determineColor(rect.operation_status)
          ctx.fillRect(rect.x, rect.y, rect.width, rect.height)
          ctx.strokeStyle = 'white'
          ctx.lineWidth = 3
          ctx.strokeRect(rect.x, rect.y, rect.width, rect.height)
          const circleX = rect.x + rect.width / 2
          const circleY = rect.y + rect.height / 2
          drawCircleLabel(ctx, circleX, circleY, 15, rect.process_id, 'transparent', 'white')
        })
      }
    },
    /**
     * Determines the color of the operation based on the status value
     * @param {int} status - status value of the operation
     * @returns {string} color based on the status
     */
    determineColor(status) {
      let statusColor = ''

      switch (status) {
        case 1: // 稼働中 In operation
          statusColor = 'green'
          break
        case 2: // 準備中 preparation
          statusColor = '#FFCA37'
          break
        case 3: // 異常停止 abnormal stop
          statusColor = 'red'
          break
        default:
          statusColor = 'grey'
      }

      return statusColor
    },
  },
}
</script>
<style>
.custom-table th,
.custom-table td {
  border: 1px solid #ffffff;
  padding: 5px;
  font-size: 22px;
  color: #ffffff;
}

.operationStatus {
  background-color: green;
}

.lineChartImage {
  width: 26rem;
  max-width: 30rem;
}
</style>


/// navbar

<template>
  <v-container fluid class="bg-grey-darken-4">
    <v-row no-gutters align="center" justify="center">
      <v-col cols="12" sm="9" class="bg-grey-darken-4">
        <common-label :item="appTitle" />
      </v-col>

      <v-col cols="12" sm="3" class="text-sm-right bg-grey-darken-4">
        <common-label :item="currentDateTime" />
      </v-col>
    </v-row>
  </v-container>
</template>

<script>
import { DateTime } from 'luxon'
import CommonLabel from '@/components/common/CommonLabel.vue'
import { NAVBAR_TITLE_LABEL, NAVBAR_DATETIME_LABEL } from '@/common/recipe/rLabels'

export default {
  name: 'NavBarComponent',
  components: {
    CommonLabel,
  },
  data() {
    return {
      appTitle: NAVBAR_TITLE_LABEL,
      currentDateTime: JSON.parse(JSON.stringify(NAVBAR_DATETIME_LABEL)),
    }
  },
  mounted() {
    this.updateDateTime()
    this.updateInterval()
  },
  methods: {
    /**
     * Updates the current date and time using Moment.js.
     */
    updateDateTime() {
      const now = DateTime.now()
      this.currentDateTime.display.label = now.toFormat('yyyy/dd/MM HH:mm:ss')
    },
    /**
     * Sets the interval for updating the date and time
     */
    updateInterval() {
      setInterval(this.updateDateTime, 1000)
    },
  },
}
</script>

<style scoped>
.fw-bold {
  font-weight: bold;
}
</style>


//// common label

<template>
  <label v-bind="item.directives">{{ item.display.label }}</label>
</template>

<script>
export default {
  name: 'CommonLabel',
  /**
   * @description
   * Receives object of data
   * * @object directives:
   * - directives {Object} - includes attributes of the component
   * - label {String} - text label of the component
   */
  props: {
    item: {
      type: Object,
      required: true,
    },
  },
}
</script>


//// rlabels

const NAVBAR_TITLE_LABEL = {
  componentName: 'CommonLabel',
  data: {
    saveAs: 'appTitle',
  },
  display: {
    label: 'GSP3ミリ波1号ライン',
  },
  directives: {
    class: 'fw-bold fs-2 text-h5',
  },
}

const NAVBAR_DATETIME_LABEL = {
  componentName: 'CommonLabel',
  data: {
    saveAs: 'datetime',
  },
  display: {
    label: '',
  },
}

export { NAVBAR_TITLE_LABEL, NAVBAR_DATETIME_LABEL }


/// apiRequest

import axios from 'axios'
import { API_BASE_URL } from '@/enviroment'

/**
 * Initialization of all API Requests.
 */
export class FetchAPI {
  /**
   * Send get request
   * @param {String} uri - uri of the database
   * @param {*} id
   * @param {Object} obj - check for the new reference
   * @return {Object} response.data - the response from the backend
   */
  async get(uri, obj = {}) {
    let response
    try {
      response = await axios.get(API_BASE_URL + uri, obj)
    } catch (error) {
      response = {
        data: {
          success: false,
          message_response: error.message,
          message_content: error.message
        }
      }
    }
    return response.data
  }
  /**
   * Send put request
   * @param {String} uri - uri of the database
   * @param {String} data - data to be updated to the database
   * @param{Number} good - non defective product
   * @return {Object} response.data - the response from the backend
   */
  async put(uri, data) {
    let response
    try {
      response = await axios.put(API_BASE_URL + uri, {
        params: data
      })
    } catch (error) {
      response = {
        data: {
          success: false,
          message_response: error.message,
          message_content: error.message
        }
      }
    }
    return response.data
  }
  /**
   * Send put request
   * @param {String} uri - uri of the database
   * @param {String} data - data to be posted to the database
   * @return {Object} response.data - the response from the backend
   */
  async post(uri, data) {
    let response
    try {
      response = await axios.post(API_BASE_URL + uri, {
        params: data
      })
    } catch (error) {
      response = {
        data: {
          success: false,
          message_response: error.message,
          message_content: error.message
        }
      }
    }
    return response.data
  }
  /**
   * Send put request
   * @param {String} uri - uri of the database
   * @param {Object} data - id to be reffered to the database
   * @return {Object} response.data - the response from the backend
   */
  async delete(uri, data) {
    let response
    try {
      response = await axios.delete(API_BASE_URL + uri, {
        params: data
      })
      return response
    } catch (error) {
      response = {
        data: {
          success: false,
          message_response: error.message,
          message_content: error.message
        }
      }
    }
    return response.data
  }
}


/// environment

/**
 * Set Api Base Url
 * @return {String}
 */
function getApiBaseUrl() {
  const env = process.env.NODE_ENV
  if (env === 'development') {
    return 'http://localhost:5000'
  }

  const url = window.location.origin + '/'
  return url
}

const API_BASE_URL = getApiBaseUrl()
export { API_BASE_URL }



##### m_coordinates

from src.setup_db_example.database import db

class CoordinatesDb(db.Model):
    """Represents a model for storing the data in coordinates_tbl

    Args:
        db (sqlalchemy): SQLAlchemy engine
    """

    __tablename__ = "coordinates_tbl"
    coordinates_id = db.Column(db.Integer, primary_key=True)
    x_position = db.Column(db.Integer, nullable=False)
    y_position = db.Column(db.Integer, nullable=False)
    width = db.Column(db.Integer, nullable=False)
    height = db.Column(db.Integer, nullable=False)
    operation_information = db.relationship('OperationInformationDb', back_populates='coordinates')

### m_operation_information

from src.setup_db_example.database import db

class OperationInformationDb(db.Model):
    """Represents a model for storing the data in operation_information_tbl

    Args:
        db (sqlalchemy): SQLAlchemy engine
    """

    __tablename__ = "operation_information_tbl"
    process_id = db.Column(db.Integer, primary_key=True)
    process_name = db.Column(db.String(128), nullable=False)
    operation_status = db.Column(db.Integer, nullable=False)
    product_number = db.Column(db.Integer, nullable=False)
    facility_cycle_time = db.Column(db.Float(3), nullable=False)
    coordinates_id = db.Column(db.Integer, db.ForeignKey("coordinates_tbl.coordinates_id"), nullable=False)
    coordinates = db.relationship('CoordinatesDb', back_populates="operation_information")



### a_operation_information

from src.setup_db_example.models.m_operation_information import OperationInformationDb
from src.setup_db_example.database import db
from flask import Blueprint
from pprint import pprint
import traceback

operation_information_router = Blueprint("a_operation_", __name__)

@operation_information_router.route("/api/get-coordinates", methods=["GET"])
def get_coordinates():
    """Fetch all the coordinates

    Returns:
        dict: return the api response
    """   

    process = OperationInformationDb.query.all()
    operation_data = []
    
    for data in process:
            operation_data_dict = {
                "process_id": data.process_id,
                "operation_status": data.operation_status,
                "x": data.coordinates.x_position,
                "y": data.coordinates.y_position,
                "width": data.coordinates.width,
                "height": data.coordinates.height,
            }
            
            operation_data.append(operation_data_dict)
    return{
        "success": True,
        "message_response": "COORDINATES FETCHED SUCCESSFULLY",
        "message_content": "COORDINATES fetched successfully",
        "data": operation_data
        }, 200


#### a_image

from flask import Blueprint, send_from_directory
from pprint import pprint
import traceback


image_router = Blueprint("a_image", __name__)

@image_router.route("/assets/images/<filename>", methods=['GET'])
def get_image_url(filename):
    """Api for getting the images

    Args:
        filename (String): the file path for the images  

    Returns:
        dict: api response
    """    
    return send_from_directory('assets/images', filename)


### s_coordinates

from src.setup_db_example.models.m_coordinates import CoordinatesDb
from marshmallow_sqlalchemy import SQLAlchemyAutoSchema
from flask_marshmallow import Marshmallow

ma = Marshmallow()


class CoordinatesSchema(SQLAlchemyAutoSchema):
    """
    This class positions schema with the corresponding db table model

    Args:
        SQLAlchemyAutoSchema (sqlalchemy): SQLAlchemy engine
    """
    class Meta:
        """Meta Class
        """

        model = CoordinatesDb
        load_instance = True            


### s_operation_information

from marshmallow_sqlalchemy import SQLAlchemyAutoSchema
from flask_marshmallow import Marshmallow
from src.setup_db_example.models.m_operation_information import OperationInformationDb
from src.setup_db_example.schemas.s_coordinates import CoordinatesSchema

ma = Marshmallow()


class OperationInformationSchema(SQLAlchemyAutoSchema):
    """
    This class positions schema with the corresponding db table model

    Args:
        SQLAlchemyAutoSchema (sqlalchemy): SQLAlchemy engine
    """

    class Meta:
        """Meta Class
        """    


        model = OperationInformationDb
        load_instance = True
        include_relationship = True

    ma.Nested(CoordinatesSchema)    


### database

from flask_sqlalchemy import SQLAlchemy
from sqlalchemy.exc import SQLAlchemyError
from sqlalchemy.sql import text
from flask_migrate import Migrate, upgrade, init
from time import sleep
import os


# Create instances of SQLAlchemy and Migrate
db = SQLAlchemy()
migrate = Migrate()


def initialize_database(app):
    app.config["SQLALCHEMY_TRACK_MODIFICATIONS"] = True
    app.config["SQLALCHEMY_DATABASE_URI"] = os.getenv(
        "DATABASE_URL", "postgresql://postgres:postgres@db-nexus_app:5432/db_nexus_app"
    )
    app.config["DEBUG"] = True
    # app.config["SQLALCHEMY_BINDS"] = {"db2": "postgresql://postgres:postgres@db-nexus_app2:5432/db_nexus_app2"}

    db.init_app(app)
    migrate.init_app(app, db)

    # Import your models here so they are registered with SQLAlchemy
    from src.setup_db_example.models.m_coordinates import CoordinatesDb
    from src.setup_db_example.models.m_operation_information import OperationInformationDb

    sleep(2)  # wait for 2 seconds for the TCP to be initialized

    if not os.path.isdir("/usr/opt/nexus-app/backend/migrations"):
        init()
    print("Alembic Migration Initialized")
    __upgrade_database__(app)


def __upgrade_database__(app):
    with app.app_context():
        upgrade()
        print("Database upgraded successfully.")


### app.py

from flask import Flask
from flask_cors import CORS
from src.setup_db_example.database import initialize_database
from src.setup_db_example.api.a_image import image_router
from src.setup_db_example.api.a_operation_information import operation_information_router

def create_app():
    app = Flask(__name__)
    CORS(app)

    # Setup Database
    initialize_database(app)
    app.register_blueprint(image_router)
    app.register_blueprint(operation_information_router)
    return app


//// rTables

const TABLE_OPERATIONAL_STATUS = [
  {
    display: {
      label: '稼働状況',
    },
    directives: {
      class: '',
    },
  },
  {
    display: {
      label: '異常発生中',
    },
    directives: {
      class: '',
    },
  },
]

const DEFAULT_TABLE_PROPERTIES = {
  TABLE_HEADER: [
    {
      COMPONENT_NAME: 'CommonLabel',
      display: {
        label: '稼働状況',
      },
      directives: {
        style: {
          fontWeight: 'bold',
          width: '14rem',
          backgroundColor: '#424242',
          borderColor: 'white',
          textAlign: 'center',
        },
      },
    },
    {
      COMPONENT_NAME: 'CommonLabel',
      display: {
        label: '稼働中',
      },
      directives: {
        class: 'operationStatus',
        style: {
          fontWeight: 'bold',
          width: '9rem',
          borderColor: 'white',
          textAlign: 'center',
        },
      },
    },
  ],
  TH_DIRECTIVES: {
    class: 'custom-table',
  },

  TABLE_ROW: [],
}

export { TABLE_OPERATIONAL_STATUS, DEFAULT_TABLE_PROPERTIES }


//// Common Table

<template>
  <v-table class="custom-table">
    <thead>
      <tr>
        <th
          v-show="TABLE_PROPERTIES.TABLE_HEADER.length != 0"
          v-for="(column, columnIndex) in TABLE_PROPERTIES.TABLE_HEADER"
          :key="columnIndex"
          v-bind="column.directives"
        >
          <common-label :item="column"></common-label>
        </th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td
          v-show="TABLE_PROPERTIES.TABLE_ROW.length != 0"
          v-for="(column, columnIndex) in TABLE_PROPERTIES.TABLE_ROW"
          :key="columnIndex"
          v-bind="column.directives"
        >
          <common-label :item="column"></common-label>
        </td>
      </tr>
    </tbody>
  </v-table>
</template>

<script>
import { DEFAULT_TABLE_PROPERTIES } from '@/common/recipe/rTables'
import CommonLabel from './CommonLabel.vue'
export default {
  components: { CommonLabel },
  name: 'CommonTable',
  /**
   * @description
   * Receives object of data
   * * @object directives:
   * - directives {Object} - includes attributes of the component
   */

  data() {
    return {
      TABLE_PROPERTIES: { ...DEFAULT_TABLE_PROPERTIES },
    }
  },
  mounted() {
    console.log('TABLE_PROPERTIES', this.TABLE_PROPERTIES)
  },
}
</script>
